---
import { twMerge } from '../../tailwind/tailwind-merge.js';
import bundle from './index.js';
import type { IconAttributes as Props } from './index.d.ts';

const {
  icon,
  class: className,
  color = 'currentcolor',
  size = '1em',
  width = size,
  height = size,
  gradient,
  'aria-label': ariaLabel,
  ...props
}: Props = Astro.props;

const label = ((await Astro.slots.render('default')) || ariaLabel)?.trim();

const { body = '', viewBox = '0 0 256 256' } = bundle[icon];

const id = `_${Math.floor((1 + Math.random()) * 0x1000)
  .toString(16)
  .substring(1)}`;
---

{
  label && (
    <span
      class='sr-only'
      set:text={label}
    />
  )
}

<svg
  class:list={twMerge('linecap-round linejoin-round align-middle', className)}
  xmlns='http://www.w3.org/2000/svg'
  {width}
  {height}
  fill={gradient ? `url(#${id})` : color}
  {viewBox}
  aria-label={label}
  {...props}>
  <g set:html={body} />
  {
    gradient && (
      <defs>
        <linearGradient
          {id}
          x1='0%'
          y1='0%'
          x2='100%'
          y2='0%'
          gradientTransform={`rotate(${gradient.rotate ? gradient.rotate : 0})`}>
          {gradient.stops.map((stop) =>
            Object.entries(stop).map(([offset, val]) => (
              <stop
                offset={offset}
                style={{
                  stopColor: typeof val === 'string' ? val : val.color,
                  stopOpacity:
                    typeof val !== 'string' && typeof val.opacity !== 'undefined' && val.opacity < 1
                      ? val.opacity
                      : ''
                }}
              />
            ))
          )}
        </linearGradient>
      </defs>
    )
  }
</svg>
