---
import { twMerge } from '../../tailwind/tailwind-merge.js';
import Button from '../button/Button.astro';
import Link from '../link/Link.astro';
import { uuid as u } from '../../utils/index.js';
import type { HTMLAttributes } from 'astro/types';
import type { NavItem } from '../../index.d.ts';

interface Toggle extends Omit<NavItem, 'id' | 'aria-expanded' | 'aria-controls'> {}

interface Props extends Omit<HTMLAttributes<'div'>, 'class'> {
  toggle: Toggle;
  class?: ClassValue;
  custom?: Record<string, ClassValue>;
}

const { toggle, class: className, custom = {}, ...props } = Astro.props;

const { href, class: classNameToggle, pointer = true, type, ...propsToggle } = toggle;

const uuid = u();
---

<div
  is='app-navbar-dropdown'
  class={twMerge('relative', 'ready:transition-transform ready:duration-200', custom.frame)}
  {...props}>
  {
    !!href ? (
      <Link
        id={`app-dropdown-toggle-${uuid}`}
        class={twMerge('group', 'flex gap-x-1', classNameToggle, className)}
        {href}
        {type}
        {pointer}
        aria-expanded='false'
        aria-controls={`app-dropdown-appear-${uuid}`}
        {...propsToggle}>
        {!!custom.caret && (
          <span
            slot='after'
            class={twMerge('block', custom.caret)}
          />
        )}
      </Link>
    ) : (
      <Button
        id={`app-dropdown-toggle-${uuid}`}
        class={twMerge('group', 'flex gap-x-1', classNameToggle, className)}
        type='button'
        aria-expanded='false'
        aria-controls={`app-dropdown-appear-${uuid}`}
        {...propsToggle}>
        {!!custom.caret && (
          <span
            slot='after'
            class={twMerge('block', custom.caret)}
          />
        )}
      </Button>
    )
  }

  <div
    id={`app-dropdown-appear-${uuid}`}
    class={twMerge(
      'static bp:absolute bp:top-full',
      'overflow-hide w-max min-w-full',
      'flex flex-col',
      'inert:opacity-0',
      'origin-top-left bp:origin-top',
      'duration-200 ease-in-out motion-safe:ready:transition-all',
      custom.drop
    )}
    inert
    aria-owns={`app-dropdown-toggle-${uuid}`}>
    <slot />
  </div>
</div>

<script>
  import AppDropdown from '../dropdown/AppDropdown.js';

  class AppNavbarDropdown extends AppDropdown {
    constructor() {
      super();
    }

    connectedCallback() {
      super.connectedCallback();
      document.addEventListener('click', this.handleOutside);
    }

    disconnectedCallback() {
      super.disconnectedCallback();
      document.removeEventListener('click', this.handleOutside);
    }

    handleOutside = (ev: Event) => {
      if (
        ev?.target &&
        // ev.defaultPrevented &&
        !this.contains(ev.target as Node)
      )
        this.hide = true;
    };
  }

  customElements.define('app-navbar-dropdown', AppNavbarDropdown, { extends: 'div' });
</script>
