---
type Props = {
  counter: number | string;
  clickmap?: boolean;
  trackLinks?: boolean;
  accurateTrackBounce?: boolean;
  trackHash?: boolean;
  webvisor?: boolean;
  type?: string;
};
const {
  counter,
  clickmap = true,
  trackLinks = true,
  accurateTrackBounce = true,
  trackHash = true,
  webvisor,
  type
} = Astro.props;

const options = JSON.stringify({ clickmap, trackLinks, accurateTrackBounce, trackHash, webvisor });
---

<app-yandex-metrika
  data-counter={counter}
  data-options={options}
  data-type={type}
></app-yandex-metrika>

<script>
  import type { Ym } from './index.d.ts';
  declare const ym: Ym;

  class AppYandexMetrika extends HTMLElement {
    constructor() {
      super();
    }

    connectedCallback() {
      this.init();
    }

    get counter() {
      const counter = this.dataset.counter ? parseInt(this.dataset.counter) : NaN;
      return isNaN(counter) ? 0 : counter;
    }

    get options() {
      return this.dataset.options ? JSON.parse(this.dataset.options) : {};
    }

    init = () => {
      if (this.counter) {
        ((w: any, y) => {
          w[y] = (...rest: unknown[]) => (w[y].a = w[y].a || []).push(rest);
          w[y].l = Number(new Date());
        })(window, 'ym');
        const src = `https://mc.yandex.ru/metrika/tag.js`;
        if (!document.head.querySelector(`script[src="${src}"]`)) {
          const el = document.createElement('script');
          el.src = src;
          el.async = true;
          if (this.dataset.type) el.type = this.dataset.type;
          el.addEventListener('load', () => ym(this.counter, 'init', this.options), { once: true });
          document.head.appendChild(el);
        }
      }
    };
  }

  customElements.define('app-yandex-metrika', AppYandexMetrika);
</script>
