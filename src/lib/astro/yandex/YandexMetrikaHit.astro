---
interface Props {
  counter: number | string;
  title: string;
}

const { counter, title } = Astro.props;

const href = Astro.url.href;
---

<app-yandex-metrika-hit
  data-counter={counter}
  data-title={title}
  data-href={href}
></app-yandex-metrika-hit>

<script>
  declare const ym: (...x: unknown[]) => void;

  let referer: string | undefined;

  class AppYandexMetrikaHit extends HTMLElement {
    interval?: ReturnType<typeof setInterval>;

    constructor() {
      super();
    }

    connectedCallback() {
      document.addEventListener('astro:before-swap', this.navi, { once: true });
      document.addEventListener('astro:page-load', this.init, { once: true });
    }

    disconnectedCallback() {
      clearInterval(this.interval);
      document.removeEventListener('astro:before-swap', this.navi);
      document.removeEventListener('astro:page-load', this.init);
    }

    get counter() {
      const counter = this.dataset.counter ? parseInt(this.dataset.counter) : NaN;
      return isNaN(counter) ? 0 : counter;
    }

    navi = (ev: Event & { from?: URL }) => {
      referer = ev.from?.href;
    };

    init = () => {
      if (this.counter) {
        this.interval = setInterval(() => {
          if (typeof ym !== 'undefined') {
            ym(this.counter, 'hit', this.dataset.href, {
              title: this.dataset.title,
              referer
            });
            clearInterval(this.interval);
          }
        }, 75);
      }
    };
  }

  customElements.define('app-yandex-metrika-hit', AppYandexMetrikaHit);
</script>
