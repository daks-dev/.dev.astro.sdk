---
import type { HTMLAttributes } from 'astro/types';
import { twMerge } from '../../tailwind/tailwind-merge.js';
import { uuid } from '../../utils/index.js';
import type { YandexMapGeo } from '../../index.d.ts';

interface Props extends Omit<HTMLAttributes<'div'>, 'class' | 'lang'> {
  geo: YandexMapGeo;
  strict?: true;
  id?: string;
  class?: ClassValue;
  apikey?: string;
  lang?: string;
  load?: string;
}

const {
  geo,
  strict,
  id = `ymap-${uuid()}`,
  class: className,
  apikey,
  lang = 'ru_RU',
  load = 'Map,Placemark,control.ZoomControl,control.FullscreenControl,geoObject.addon.balloon',
  ...props
} = Astro.props;

if (!strict)
  geo.options = Object.assign({}, geo.options, {
    // avoidFractionalZoom: false,
    // autoFitToViewport: 'always',
    suppressMapOpenBlock: true
  });
---

<app-yandex-map
  data-geo={JSON.stringify(geo)}
  data-apikey={apikey}
  data-lang={lang}
  data-load={load}>
  <template>
    <div
      {id}
      class={twMerge('relative z-0 overflow-hidden', className)}
      {...props}>
    </div>
  </template>
</app-yandex-map>

<script>
  import type { YandexMapGeo, YandexMapInstance, Ymaps } from '../../index.d.ts';
  declare const ymaps: Ymaps;

  class AppYandexMap extends HTMLElement {
    map!: YandexMapInstance;
    container: HTMLDivElement;
    interval?: ReturnType<typeof setInterval>;

    constructor() {
      super();
      this.style.display = 'contents';
      this.appendChild(this.querySelector('template')!.content.cloneNode(true));
      this.container = this.querySelector('div')!;
    }

    connectedCallback() {
      document.addEventListener('astro:page-load', this.init, { once: true });
    }

    disconnectedCallback() {
      clearInterval(this.interval);
    }

    get geo(): YandexMapGeo {
      return JSON.parse(this.dataset.geo ?? '{}');
    }

    get params() {
      return new URLSearchParams({
        ...(this.dataset.apikey ? { apikey: this.dataset.apikey } : {}),
        ...(this.dataset.lang ? { lang: this.dataset.lang } : {}),
        ...(this.dataset.load ? { load: this.dataset.load } : {})
        // mode: 'debug'
      }).toString();
    }

    upload = (): boolean => {
      return Boolean(typeof ymaps !== 'undefined' && ymaps?.Map && ymaps?.Placemark);
    };

    mount = (): void => {
      this.interval = setInterval(() => {
        if (this.upload()) {
          ymaps.ready?.(() => {
            this.map = new ymaps.Map(this.container.id, this.geo.state, this.geo.options);
            this.geo.locations?.forEach((location) => {
              this.map.geoObjects.add(
                new ymaps.Placemark(location.geometry, location.properties, location.options)
              );
            });
          });
          clearInterval(this.interval);
        }
      }, 75);
    };

    init = () => {
      // if (this.upload()) this.mount();
      // else {
      const src = `https://api-maps.yandex.ru/2.1/?${this.params}`;
      if (document.head.querySelector(`script[src="${src}"]`)) this.mount();
      else {
        if (typeof ymaps !== 'undefined') delete ymaps.ready;
        const el = document.createElement('script');
        el.src = src;
        el.async = true;
        document.head.appendChild(el);
        el.addEventListener('load', this.mount, { once: true });
      }
      // }
    };
  }

  customElements.define('app-yandex-map', AppYandexMap);
</script>
