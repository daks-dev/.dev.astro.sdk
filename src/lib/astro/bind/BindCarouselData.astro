---
import { getImage } from 'astro:assets';
import CarouselData from '../../svelte/carousel/CarouselData.svelte';
import type { CarouselDataAttributes } from '../../svelte/carousel/index.d.ts';
import type { BindImageData } from './index.d.ts';

interface Props extends Omit<CarouselDataAttributes, 'data'> {
  client: 'load' | 'idle' | 'visible' | 'only';
  data: BindImageData[];
  transform: ImageTransform;
  filter?: string[];
}

const { client, data: __data, transform, filter, ...props } = Astro.props;

const data: (ImageResult & {
  alt?: string;
  caption?: Record<string, string>;
})[] = [];

const load = async (x: BindImageData[]) => {
  for (const { src, alt, caption: __caption } of x) {
    const y = await getImage({
      src,
      ...transform
    });
    const caption = Object.entries(__caption ?? {}).reduce(
      (acc, [key, val]) => (
        (filter === undefined || filter.includes(key)) && (acc[key] = val), acc
      ),
      {} as Record<string, string>
    );
    data.push({
      src: y.src,
      attributes: y.attributes,
      alt,
      caption
    });
  }
};
await load(__data);
---

{
  client === 'only' ? (
    <CarouselData
      client:only='svelte'
      {data}
      {...props}
    />
  ) : client === 'visible' ? (
    <CarouselData
      client:visible
      {data}
      {...props}
    />
  ) : client === 'idle' ? (
    <CarouselData
      client:idle
      {data}
      {...props}
    />
  ) : (
    <CarouselData
      client:load
      {data}
      {...props}
    />
  )
}
