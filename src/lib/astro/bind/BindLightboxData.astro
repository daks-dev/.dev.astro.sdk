---
import { getImage } from 'astro:assets';
import LightboxData from '../../svelte/lightbox/LightboxData.svelte';
import type { LightboxDataAttributes } from '../../svelte/lightbox/index.d.ts';
import type { BindImageData } from './index.d.ts';

interface Props extends Omit<LightboxDataAttributes, 'data'> {
  data: BindImageData[];
  transform: {
    [x in 'thumb' | 'modal']: ImageTransform;
  };
  filter?: string[];
  client?: 'load' | 'idle' | 'visible'; // | (string & NonNullable<unknown>)
}

const { data: __data, transform, filter, client = 'visible', ...props } = Astro.props;

const data: {
  thumb: ImageResult;
  modal: ImageResult;
  alt?: string;
  caption?: Record<string, string>;
}[] = [];

const load = async (x: BindImageData[]) => {
  for (const { src, alt, caption: __caption } of x) {
    const t = await getImage({
      src,
      ...transform.thumb
    });
    const m = await getImage({
      src,
      ...transform.modal
    });
    const caption = Object.entries(__caption ?? {}).reduce(
      (acc, [key, val]) => (
        (filter === undefined || filter.includes(key)) && (acc[key] = val), acc
      ),
      {} as Record<string, string>
    );
    data.push({
      thumb: {
        src: t.src,
        attributes: t.attributes
      },
      modal: {
        src: m.src,
        attributes: m.attributes
      },
      alt,
      caption
    });
  }
};
await load(__data);
---

{
  client === 'visible' ? (
    <LightboxData
      {data}
      {...props}
      client:visible
    />
  ) : client === 'idle' ? (
    <LightboxData
      {data}
      {...props}
      client:idle
    />
  ) : (
    <LightboxData
      {data}
      {...props}
      client:load
    />
  )
}
