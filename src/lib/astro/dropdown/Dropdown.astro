---
import { twMerge } from '../../tailwind/tailwind-merge.js';
import Button from '../button/Button.astro';
import Link from '../link/Link.astro';
import { uuid as u } from '../../utils/index.js';
import type { HTMLAttributes } from 'astro/types';
import type { NavItem } from '../../index.d.ts';

interface Toggle extends Omit<NavItem, 'id' | 'aria-expanded' | 'aria-controls'> {}

interface Props extends Omit<HTMLAttributes<'div'>, 'class'> {
  toggle: Toggle;
  class?: ClassValue;
  custom?: Record<string, ClassValue>;
}

const { toggle, class: className, custom = {}, ...props } = Astro.props;

const { href, class: classNameToggle, pointer = true, type, ...propsToggle } = toggle;

const uuid = u();
---

<div
  is='app-dropdown'
  class={twMerge('relative', 'ready:transition-transform ready:duration-200', custom.frame)}
  {...props}>
  {
    Boolean(href) ? (
      <Link
        id={`app-dropdown-toggle-${uuid}`}
        class={twMerge('group', 'flex gap-x-1', classNameToggle, className)}
        {href}
        {type}
        {pointer}
        aria-expanded='false'
        aria-controls={`app-dropdown-appear-${uuid}`}
        {...propsToggle}>
        <span
          slot='after'
          class:list={[
            'iconify ph--caret-left-bold',
            'block size-3',
            'group-aria-expanded:-rotate-90',
            'disabled'
          ]}
        />
      </Link>
    ) : (
      <Button
        id={`app-dropdown-toggle-${uuid}`}
        class={twMerge('group', 'flex gap-x-1', classNameToggle, className)}
        type='button'
        aria-expanded='false'
        aria-controls={`app-dropdown-appear-${uuid}`}
        {...propsToggle}>
        <span
          slot='after'
          class:list={[
            'iconify ph--caret-left-bold',
            'block size-3',
            'group-aria-expanded:-rotate-90',
            'disabled'
          ]}
        />
      </Button>
    )
  }

  <div
    id={`app-dropdown-appear-${uuid}`}
    class={twMerge(
      'static bp:absolute bp:top-full',
      'w-max min-w-full overflow-hidden',
      'flex flex-col',
      'inert:disabled inert:opacity-0',
      'inert:my-0 inert:max-h-0 inert:py-0 inert:text-[0px] inert:leading-0',
      'max-bp:inert:max-w-0',
      'origin-top-left bp:origin-top',
      'duration-200 motion-safe:ready:transition-all',
      custom.drop
    )}
    inert
    aria-owns={`app-dropdown-toggle-${uuid}`}>
    <slot />
  </div>
</div>

<script>
  import { navigate } from 'astro:transitions/client';
  import { beep } from '../../utils/audio.js';
  import breakpoint from '../../tailwind/resolve.js';

  class AppDropdown extends HTMLDivElement {
    media = window.matchMedia(`(min-width: ${breakpoint})`);

    constructor() {
      super();
    }

    connectedCallback() {
      window.addEventListener('resize', this.bind);
      document.addEventListener('astro:page-load', this.bind, { once: true });
      document.addEventListener('click', this.handleOutside);
      this.toggle.addEventListener('click', this.handleToggle);
      this.toggle.addEventListener('dblclick', this.handleNavigate);
    }

    disconnectedCallback() {
      window.removeEventListener('resize', this.bind);
      document.removeEventListener('click', this.handleOutside);
    }

    toggle = this.children[0] as HTMLAnchorElement;

    dropper = this.children[1] as HTMLDivElement;

    get hidden() {
      return this.dropper.hasAttribute('inert');
    }

    set hidden(val) {
      if (this.hidden !== val) {
        if (val) {
          this.toggle.setAttribute('aria-expanded', 'false');
          this.dropper.setAttribute('inert', '');
        } else {
          this.toggle.setAttribute('aria-expanded', 'true');
          this.dropper.removeAttribute('inert');
        }
      }
    }

    bind = () => {
      this.hidden = true;
      if (this.media.matches)
        if (this.offsetLeft + this.clientWidth / 2 < window.innerWidth / 2) {
          this.dropper.style.left = '0';
          this.dropper.style.right = '';
        } else {
          this.dropper.style.left = '';
          this.dropper.style.right = '0';
        }
    };

    handleToggle = (ev: Event) => {
      ev.preventDefault();
      // ev.stopPropagation();
      this.hidden = !this.hidden;
    };

    handleNavigate = (ev: Event) => {
      if (ev.cancelable) ev.preventDefault();
      if (this.toggle.pathname)
        if (this.toggle.getAttribute('aria-current') === 'page') beep(250, 150, 75);
        else navigate(this.toggle.pathname);
    };

    handleOutside = (ev: Event) => {
      if (
        ev?.target &&
        // ev.defaultPrevented &&
        !this.contains(ev.target as Node)
      )
        this.hidden = true;
    };
  }

  customElements.define('app-dropdown', AppDropdown, { extends: 'div' });
</script>
