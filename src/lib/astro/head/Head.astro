---
import type { AppConfig } from '../../app/index.d.ts';

// import pkg from 'package.json';
// const { version } = pkg;

interface Props {
  title: string;
  description: string;
  robots?: string;
  app?: AppConfig;
  rss?: string;
  image?: string;
}

const {
  title,
  description,
  robots = 'index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1',
  app,
  rss,
  image
} = Astro.props;
---

<meta charset='UTF-8' />
<meta
  name='viewport'
  content='width=device-width, initial-scale=1.0'
/>
<meta
  name='robots'
  content={robots}
/>
<link
  rel='canonical'
  href={new URL(Astro.url.pathname, Astro.site)}
/>

<title>{title}</title>
<meta
  name='title'
  content={title}
/>
<meta
  name='description'
  content={description}
/>

<script is:inline>
  ((e, l, i, c) => {
    const get = () => (l?.getItem(i) ? l.getItem(i) : e.classList.contains(c) ? 'dark' : 'light');
    const set = () => e.classList[get() === 'dark' ? 'add' : 'remove'](c);
    const observer = new MutationObserver(() =>
      l.setItem(i, e.classList.contains(c) ? 'dark' : 'light')
    );
    observer.observe(e, { attributes: true, attributeFilter: ['class'] });
    set();
    document.addEventListener('astro:after-swap', set);
  })(document.documentElement, localStorage, 'app::theme', 'theme-dark');
</script>

<slot name='preload' />
{
  /*
<link
  rel='preload'
  href='/fonts/open-sans/open-sans-latin-variable-wghtOnly-normal.woff2'
  as='font'
  type='font/woff2'
  crossorigin
  transition:persist
/>
  */
}

{
  /*
<link
  rel='preload'
  href='/images/bg/dark/main/800w.avif'
  as='image'
  type='image/avif'
  media='(max-width: 799px)'
/>
  */
}

{
  rss && (
    <link
      rel='alternate'
      type='application/rss+xml'
      title='RSS'
      href={new URL(rss, Astro.site)}
    />
  )
}

<link
  rel='alternate icon'
  href='/favicon.ico'
  sizes='any'
/>
<link
  rel='apple-touch-icon'
  href='/favicon/192.png'
/>
<link
  rel='manifest'
  href='/manifest.webmanifest'
/>
<meta
  name='msapplication-config'
  content='/browserconfig.xml'
/>
{
  app?.themeColor && (
    <meta
      name='theme-color'
      content={app.themeColor}
    />
  )
}
{
  app?.tileColor && (
    <meta
      name='msapplication-TileColor'
      content={app.tileColor}
    />
  )
}
{
  app?.shortName && (
    <>
      <meta
        name='application-name'
        content={app.shortName}
      />
      <meta
        name='apple-mobile-web-app-title'
        content={app.shortName}
      />
    </>
  )
}
<link
  rel='yandex-tableau-widget'
  href='/tableau.json'
/>

<meta
  property='og:type'
  content='website'
/>
<meta
  property='og:url'
  content={Astro.url}
/>
<meta
  property='og:title'
  content={title}
/>
<meta
  property='og:description'
  content={description}
/>
{
  image && (
    <meta
      property='og:image'
      content={new URL(image, Astro.url)}
    />
  )
}

<meta
  property='twitter:card'
  content='summary_large_image'
/>
<meta
  property='twitter:url'
  content={Astro.url}
/>
<meta
  property='twitter:title'
  content={title}
/>
<meta
  property='twitter:description'
  content={description}
/>
{
  image && (
    <meta
      property='twitter:image'
      content={new URL(image, Astro.url)}
    />
  )
}

<meta
  name='generator'
  content={Astro.generator}
/>

<script>
  import lazyLoad from '../../utils/lazyload.js';

  document.addEventListener('astro:after-swap', () => {
    // setTimeout(() => document.documentElement.classList.add('swapped'), 75);
    document.documentElement.classList.add('swapped');
  });
  document.addEventListener('astro:page-load', () => {
    // setTimeout(() => document.documentElement.classList.add('loaded'), 75);
    document.documentElement.classList.add('loaded');
    if (document.lazyload) document.lazyload.update();
    else document.lazyload = lazyLoad();
  });

  const node = document.getElementById('app-navbar');
  const scrolled = () => (window.scrollY > (node ? node.clientHeight : 0) ? 'add' : 'remove');
  window.addEventListener('load', () => {
    document.body.classList[scrolled()]('scrolled');
  });
  window.addEventListener('scroll', () => {
    document.body.classList[scrolled()]('scrolled');
  });
</script>
